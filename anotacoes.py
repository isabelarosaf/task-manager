"""
Flask:
- Framework constru√≠do para Python para desenvolvimento de aplica√ß√µes web.
- √â um *microframework*: vem enxuto e permite liberdade para escolher bibliotecas adicionais.

Framework:
- Conjunto de ferramentas, bibliotecas e conven√ß√µes que fornecem uma estrutura para desenvolver aplica√ß√µes.

Vantagens do Flask:
- Simplicidade
- Escalabilidade
- Flexibilidade

API:
- Application Programming Interface.
- Conjunto de regras, protocolos e ferramentas que permitem que diferentes softwares se comuniquem.
- Funciona como uma "ponte" ou "porta" para comunica√ß√£o entre cliente e servidor.

Fluxo de comunica√ß√£o:
CLIENTE ‚Üí (request) ‚Üí API ‚Üí Servidor
CLIENTE ‚Üê (response) ‚Üê API ‚Üê Servidor

API REST:
- REST = *Representational State Transfer*.
- Estilo de arquitetura para desenvolvimento de APIs usando princ√≠pios do protocolo HTTP.
- Principais m√©todos HTTP: GET, POST, PUT, PATCH, DELETE.

API RESTful:
- API que segue fielmente todos os princ√≠pios e restri√ß√µes do REST, como:
  - Interface uniforme
  - Stateless
  - Cacheable
  - Separa√ß√£o cliente-servidor
  - Camadas
  - (Opcional) C√≥digo sob demanda

M√©todos HTTP:
- GET: retorna dados.
- POST: insere dados.
- PUT: substitui todo o recurso.
- PATCH: atualiza parcialmente o recurso.
- DELETE: remove recurso espec√≠fico.

| Caracter√≠stica          | **REST**                                                      | **RESTful**                                                    | **N√£o REST**                                             |
| ----------------------- | ------------------------------------------------------------- | -------------------------------------------------------------- | -------------------------------------------------------- |
| **Base**                | Usa conceitos do REST, mas pode n√£o seguir tudo               | Segue fielmente todas as restri√ß√µes do REST                    | N√£o segue o padr√£o REST                                  |
| **M√©todos HTTP**        | Pode usar GET, POST, PUT, DELETE, PATCH                       | Usa m√©todos HTTP de forma correta e sem desvio                 | Pode usar HTTP de forma n√£o padr√£o (ex: tudo com POST)   |
| **URLs**                | Pode usar padr√µes parecidos                                   | URLs bem definidas e orientadas a recursos (ex: `/usuarios/1`) | URLs confusas ou sem padr√£o (ex: `/getUsuario.php?id=1`) |
| **Stateless**           | Pode n√£o ser totalmente stateless                             | Sempre stateless (cada requisi√ß√£o √© independente)              | Pode depender de sess√£o armazenada no servidor           |
| **Cache**               | Pode n√£o implementar cache                                    | Implementa cache quando poss√≠vel                               | Normalmente n√£o implementa cache                         |
| **Formato de dados**    | Pode variar (JSON, XML, etc.)                                 | Usa formatos bem definidos (geralmente JSON)                   | Sem padr√£o fixo                                          |
| **Exemplo de endpoint** | `POST /usuarios/listar` (usa POST para buscar, n√£o √© o ideal) | `GET /usuarios` (padr√£o correto para buscar)                   | `/listarUsuarios.php`                                    |

1. Cache
O que √©:
Uma forma de guardar temporariamente dados para que, quando precisarmos deles de novo, n√£o seja necess√°rio 
buscar tudo do zero.

No contexto de APIs:
Quando voc√™ faz uma requisi√ß√£o para a API e recebe uma resposta, essa resposta pode ser armazenada 
(em cache) para que, se pedir a mesma coisa de novo, a resposta seja devolvida muito mais r√°pido e com 
menos consumo do servidor.

Exemplo:
Voc√™ abre a p√°gina de um produto em um site. Se o pre√ßo n√£o muda com frequ√™ncia, ele pode estar em cache
 no seu navegador ou num servidor intermedi√°rio. Assim, n√£o precisa consultar o banco de dados toda vez.

üìå Analogia: √â como guardar um n√∫mero de telefone na agenda do celular para n√£o ter que perguntar de novo.

2. Stateless
O que √©:
Significa que o servidor n√£o guarda o ‚Äúestado‚Äù da sua sess√£o entre uma requisi√ß√£o e outra.

No contexto de APIs REST/RESTful:
Cada requisi√ß√£o que voc√™ envia precisa conter todas as informa√ß√µes necess√°rias para ser processada,
 sem depender de informa√ß√µes salvas do seu √∫ltimo acesso.

Exemplo:
Quando voc√™ faz login em um site que segue o padr√£o stateless, o servidor n√£o lembra que voc√™ 
‚Äúj√° est√° logado‚Äù automaticamente ‚Äî ele confia em um token ou credencial enviado em toda requisi√ß√£o para
 saber quem voc√™ √©.

üìå Analogia: √â como falar com um atendente que n√£o te reconhece de uma liga√ß√£o para outra ‚Äî voc√™ precisa
 repetir todas as informa√ß√µes sempre.

3. Endpoint
O que √©:
√â um endere√ßo (URL) espec√≠fico onde um recurso ou funcionalidade da API est√° dispon√≠vel para acesso.

No contexto de APIs:
Cada endpoint representa um ponto de comunica√ß√£o onde o cliente pode fazer requisi√ß√µes.

Exemplo:

GET /usuarios ‚Üí pega todos os usu√°rios

GET /usuarios/5 ‚Üí pega o usu√°rio com ID 5

POST /usuarios ‚Üí cria um novo usu√°rio

üìå Analogia: Pense na API como um pr√©dio e cada endpoint √© uma porta com um n√∫mero diferente ‚Äî cada
 uma d√° acesso a um ‚Äúc√¥modo‚Äù com dados ou funcionalidades diferentes.

CLIENTE (Navegador / App)
      |
      | 1Ô∏è‚É£ Requisi√ß√£o para um ENDPOINT espec√≠fico
      |    (ex: GET /produtos/10)
      v
API SERVER --------------------+
      |                        |
      | 2Ô∏è‚É£ Verifica se a resposta j√° est√° no CACHE
      |    (se sim, devolve direto ‚Äî mais r√°pido)
      |                        |
      | 3Ô∏è‚É£ Se n√£o estiver no cache, busca no banco de dados
      |    e retorna o resultado
      |                        |
      | 4Ô∏è‚É£ Como √© STATELESS, cada requisi√ß√£o
      |    precisa conter todas as infos necess√°rias
      |    (ex: token de autentica√ß√£o)
      v
CLIENTE recebe a RESPOSTA
 
C√≥digos de resposta HTTP:
Quando n√≥s temos a comunica√ß√£o entre dois sistemas atrav√©s de uma API, n√≥s temos a requisi√ß√£o e n√≥s temos
 a resposta, que √© muitas vezes chamada de responsa. Essa responsa vem acompanhada com um c√≥digo de 
 resposta e esse c√≥digo basicamente informa o que aconteceu aqui na sua requisi√ß√£o e n√≥s temos uma 
 classifica√ß√£o:

100 e 199 - est√° destinada √†s respostas informativas, n√£o dizem se deu certo ou se n√£o deu
200 e 299 - As bem-sucedidas (o c√≥digo 200 quer dizer que a requisi√ß√£ que voc√™ tentou fazer deu certo)
300 e 399 - s√£o para redirecionamento, geralmente ela acontece quando algu√©m tenta acessar um recurso que mudou
de lugar
400 e 499 - erro do cliente, exemplo quando o cliente envia uma inser√ß√£o de um novo registro no meu banco de
dados, mas ele errou o formato que tem que estar o CEP, nesse caso a gente vai utilizar o 400,
404 - nao encontrado
500 a 599 - erro dentro do servidor, exemplo cliente fez tudo certo mas quando vai enviar teve um erro
no banco de dados, nesse caso retorna 500 que significa internal server erro 

1xx ‚Üí Informa√ß√µes

2xx ‚Üí Sucesso

3xx ‚Üí Redirecionamento

4xx ‚Üí Erro do cliente

5xx ‚Üí Erro do servidor
"""